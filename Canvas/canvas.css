:root {
    --Common-Spacing: 3px;
}

::placeholder {
    color: rgb(121, 121, 121);
    opacity: 1; /* Firefox */
}

/* Hide hidden stuff. */
[hidden] {
    display: none !important;
}

html {
    width: 100vw;
    height: 100vh;
}

body {
    /* this is needed or the background will be offset by a few pixels at the top */
    overflow: auto;
    position: relative;

    font-family: sans-serif;

    display: flex;
    flex-direction: column;

    margin: 0px;
    padding: 0px;
}
  
body::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    z-index: -1;

    display: block;
    background-image: url("./BG@2x.png");
    background-size: 80%;
    background-repeat: repeat;
    width: 100%;
    height: 100%;
}

/* Make the background and shadows dark if the user wants that sorta thing. */
@media (prefers-color-scheme: dark) {
    body::before {
        /* backdrop-filter: invert(1) opacity(0.9); */
        background-color: black;
        filter: opacity(0.9) contrast(0.9);
    }

    .Nodule {
        box-shadow: var(--Common-Spacing) var(--Common-Spacing) var(--Common-Spacing) #79145e !important;
    }

    a:has(img)::after {
        color: rgb(255, 255, 255) !important;
    }

    a:has(img)[title] {
        /* Needs reassertion because .Nodule is changed. */
        box-shadow: none !important;
    }
}

.Nodule, .Title, button, .Trash, #RecentsInner {
    position: relative;

    background-color: grey;
    color:white;

    box-shadow: var(--Common-Spacing) var(--Common-Spacing) var(--Common-Spacing) black;
    z-index: 0;
    
    border-radius: var(--Common-Spacing);
    width: fit-content;
    height:fit-content;
    
    margin: var(--Common-Spacing);
    padding: var(--Common-Spacing);

    cursor:pointer;
}

.Nodule {
    position: absolute !important;
    resize: both;
    overflow: auto;
}

img.Nodule {
    /* Hide border on images because it looks better. */
    margin: 0; padding: 0;
}

button:hover {
    background-color: black;
    color: grey;
}

.CenterButtons, .Title {
    position: sticky;
    align-self: center;

    top: var(--Common-Spacing);

    display: flex;

    z-index: 99999999999; /* Make always on top! */
}

.Title {
    position: absolute;
    font-size: large;

    left: var(--Common-Spacing);
    top: var(--Common-Spacing);
}

.Trash {
    font-size: x-large;
    position: fixed;
    bottom: var(--Common-Spacing);
    left: var(--Common-Spacing);
    background-color: black;
    color: darkred;
    width: calc(var(--Common-Spacing) * 40);
    height: calc(var(--Common-Spacing) * 40);
    text-align: center;
    alignment-baseline: central;
    display: flex;
    align-items: center;
}

/* Icon styling */
.Icon {
    width: 128px;
    height: auto;
}

a:has(img)[title] {
    background-color: rgba(0, 0, 0, 0);
    width: max-content;
    height: max-content;
    box-shadow: none;
    display: flex;
    flex-direction: column-reverse;

    resize: none;
    overflow: visible;
}

a:has(img)::after {
    position: absolute;
    content: attr(Title);
    transform: translate(0px, 100%);
    color: black;
    width: 100%;
    text-align: center;
    height: inherit;
}

/* Does dark background */
#RecentsOuter {
    display: flex;
    position: fixed;
    width: 100%;
    height: 100%;
    left: 0%;
    top: 0%;
    background-color: rgba(58, 58, 58, 0.623);
    z-index: 5000000000;
    justify-content: center;
    flex-direction: column;

    backdrop-filter: blur(3px);
}

/* Puts in center */
#RecentsInner {
    align-self: center;
    padding: calc(2 * var(--Common-Spacing));
}

#RecentsList {
    padding-top: var(--Common-Spacing);
    padding-bottom: var(--Common-Spacing);
}

#RecentsList > table > tr {
    padding: var(--Common-Spacing);
    height: 1em;
}